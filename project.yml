title: "深度学习系统"
description: "整合所有我们需要的东西进入到系统"
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "tender"
  lang: "zh"
  spans_key: "sc"
  train: "train.json"
  dev: "dev.json"
  version: "0.0.1"
  # Set your GPU ID, -1 is CPU
  gpu_id: 0
  # Vectors model for train-with-vectors
  vectors_model: "zh_core_web_lg"
  host: "127.0.0.1"
  port: 5000
  

env:
  task: TASK
  date: DATE

# 文件夹检测
directories: ["assets", "corpus", "configs", "training", "scripts", "packages"]

# assets文件夹保存训练数据
assets:
  - dest: "assets/train.json"
    description: "Demo training data converted from the v2 `train_ner.py` example with `srsly.write_json(\"train.json\", TRAIN_DATA)`"
  - dest: "assets/dev.json"
    description: "Demo development data"

# 工作流，现在提供了标准的all和提供服务的工作流
workflows:
  all:
    - convert
    - train
    - evaluate
  all_spancats:
    - corpus
    - train_spancats
    - evaluate   
  start:
    - install
    - serve
  all_cats_trf:
    - convert_cats
    - train_cats
  all_trf_pre_train:
    - convert
    - trf_pre_train
    - evaluate
  all_rel:
    - convert_rel
    - train_rel
  all_rel_trf:
    - convert_rel
    - train_rel_trf
  all_multcats:
    - convert_cats
    - train_multcats
  all_multcats_trf:
    - convert_cats
    - train_multcats_trf
  all_ner_cat:
    - convert_ner_cat
    - train_ner_cat

# 项目命令
commands:
  - name: "hf"
    help: "使用huggingface的transformer训练"
    script:
      - "python scripts/trf.py"
    deps:
      - "assets/train_trf_maxlen.json"
      - "assets/dev_trf_maxlen.json"

  - name: "convert"
    help: "convert to ner data"
    script:
      - "python scripts/convert.py ${vars.lang} assets/${vars.train} corpus/train.spacy"
      - "python scripts/convert.py ${vars.lang} assets/${vars.dev} corpus/dev.spacy"
    deps:
      - "assets/${vars.train}"
      - "assets/${vars.dev}"
      - "scripts/convert.py"
    outputs:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"

  - name: "convert_rel"
    help: "convert to rel data"
    script:
      - "python scripts/convert_rel.py ${vars.lang} assets/${vars.train} corpus/train.spacy"
      - "python scripts/convert_rel.py ${vars.lang} assets/${vars.dev} corpus/dev.spacy"
    deps:
      - "assets/${vars.train}"
      - "assets/${vars.dev}"
      - "scripts/convert.py"
    outputs:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"

  - name: "convert_cats"
    help: "convert to cats data"
    script:
      - "python scripts/convert_cats.py ${vars.lang} assets/train.json corpus/train.spacy"
      - "python scripts/convert_cats.py ${vars.lang} assets/dev.json corpus/dev.spacy"
    deps:
      - "assets/train.json"
      - "assets/dev.json"
      - "scripts/convert_cats.py"
    outputs:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"

  - name: "create-config"
    help: "Create a new config with an NER pipeline component"
    script:
      - "python -m spacy init config --lang ${vars.lang} --pipeline ner configs/config.cfg --force"
    outputs:
      - "configs/config.cfg"

  - name: "train"
    help: "Train the NER model"
    script:
      - "python -m spacy train configs/config.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best"

  - name: "train_rel"
    help: "Train the rel model"
    script:
      - "python -m spacy train configs/config_wl_rel.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy -c scripts/custom_functions.py  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best"

  - name: "train_rel_trf"
    help: "Train the rel trf model"
    script:
      - "python -m spacy train configs/config_trf_rel.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy -c scripts/custom_functions.py  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best"

  - name: "train_cats"
    help: "Train the cat model"
    script:
      - "python -m spacy train configs/config_cats_trf_mul.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config_cats.cfg"
      - "corpus/train_cats.spacy"
      - "corpus/dev_cats.spacy"
    outputs:
      - "training/cats_model_best"

  - name: "train-with-vectors"
    help: "Train the NER model with vectors"
    script:
      - "python -m spacy train configs/config.cfg --output training/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy --training.eval_frequency 10 --training.patience 50 --gpu-id ${vars.gpu_id} --initialize.vectors ${vars.vectors_model} --components.tok2vec.model.embed.include_static_vectors true"
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/${env.task}/model-best corpus/dev.spacy --output training/metrics/${env.task}_${env.date}_metrics.json --gpu-id ${vars.gpu_id}" 
    deps:
      - "corpus/dev.spacy"
      - "training/${env.task}/model-best"
    outputs:
      - "training/${env.task}_${env.date}_metrics.json"

  - name: package
    help: "Package the trained model as a pip package"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/${vars.lang}_${vars.name}-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"

  - name: "install"
    help: "Install dependencies and download models"
    script:
      - "pip install -r requirements.txt"
    deps:
      - "requirements.txt"

  - name: "serve"
    help: "Serve the models via a FastAPI REST API using the given host and port"
    script:
      - "uvicorn scripts.main:app --reload --host ${vars.host} --port ${vars.port}"
    deps:
      - "scripts/main.py"
    no_skip: true

  - name: "pretrain"
    help: "pretrain huggingface model"
    script:
      - "python scripts/simcse.py"
    deps:
      - "data/unlabeled_train_data.txt"

  - name: "trf_pre_train"
    help: "Train the NER model"
    script:
      - "python -m spacy train configs/config_trf.cfg --output training/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config_trf.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best"

  - name: "corpus"
    help: "convert to spancat data"
    script:
      - "python scripts/convert.py ${vars.lang} assets/${vars.train} corpus/train.spacy"
      - "python scripts/convert.py ${vars.lang} assets/${vars.dev} corpus/dev.spacy"
      - "python scripts/add_ents_to_spans_dict.py corpus/train.spacy ${vars.lang} ${vars.spans_key}"
      - "python scripts/add_ents_to_spans_dict.py corpus/dev.spacy ${vars.lang} ${vars.spans_key}"
    deps:
      - "assets/${vars.train}"
      - "assets/${vars.dev}"
      - "scripts/convert.py"
    outputs:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"

  - name: "train_spancats"
    help: "Train the NER model"
    script:
      - "python -m spacy train configs/config_spancats.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best"

  - name: "train_multcats"
    help: "Train the multilabel cats"
    script:
      - "python -m spacy train configs/config_multcats.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config_multcats.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best"

  - name: "train_multcats_trf"
    help: "Train the multilabel cats"
    script:
      - "python -m spacy train configs/config_multcats_trf.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config_multcats.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best" 

  - name: "convert_ner_cat"
    help: "convert to ner and cat data"
    script:
      - "python scripts/convert_ner_cat.py ${vars.lang} assets/train.json corpus/train.spacy"
      - "python scripts/convert_ner_cat.py ${vars.lang} assets/dev.json corpus/dev.spacy"
    deps:
      - "assets/train_cats.json"
      - "assets/dev_cats.json"
      - "scripts/convert_cats.py"
    outputs:
      - "corpus/train_cats.spacy"
      - "corpus/dev_cats.spacy"

  - name: "train_ner_cat"
    help: "Train the NER and cat model"
    script:
      - "python -m spacy train configs/config_ner_cat.cfg --output training/${env.task}/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy  --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model_best" 
